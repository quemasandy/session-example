name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  REDIS_VERSION: '7'

jobs:
  # Job 1: Code Quality and Linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: Install Backend Dependencies
      working-directory: ./backend
      run: npm ci

    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci

    - name: TypeScript Check - Backend
      working-directory: ./backend
      run: npx tsc --noEmit

    - name: TypeScript Check - Frontend
      working-directory: ./frontend
      run: npx tsc --noEmit

    # Note: Add these when linting is configured
    # - name: Lint Backend
    #   working-directory: ./backend
    #   run: npm run lint
    
    # - name: Lint Frontend
    #   working-directory: ./frontend
    #   run: npm run lint

  # Job 2: Build Testing
  build:
    name: Build Testing
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: Install Backend Dependencies
      working-directory: ./backend
      run: npm ci

    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build Backend
      working-directory: ./backend
      run: npm run build

    - name: Build Frontend
      working-directory: ./frontend
      run: npm run build

    - name: Upload Backend Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: backend/dist/
        retention-days: 7

    - name: Upload Frontend Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 7

  # Job 3: Integration Testing with Redis
  integration-test:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      redis:
        image: redis:${{ env.REDIS_VERSION }}-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install Backend Dependencies
      working-directory: ./backend
      run: npm ci

    - name: Wait for Redis
      run: |
        timeout 30 bash -c 'until redis-cli ping; do sleep 1; done'

    - name: Test Redis Connection
      working-directory: ./backend
      run: |
        node -e "
        import { createClient } from 'redis';
        const client = createClient();
        client.connect().then(() => {
          console.log('✅ Redis connection successful');
          return client.ping();
        }).then(() => {
          console.log('✅ Redis ping successful');
          return client.quit();
        }).catch(err => {
          console.error('❌ Redis connection failed:', err);
          process.exit(1);
        });
        "

    - name: Test Session Monitor Tool
      working-directory: ./backend
      run: |
        timeout 10 node redis-monitor.js stats || echo "Monitor tool test completed"

    # Add actual integration tests here when available
    # - name: Run Integration Tests
    #   working-directory: ./backend
    #   run: npm run test:integration

  # Job 4: Security and Dependency Audit
  security:
    name: Security & Dependency Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Backend Security Audit
      working-directory: ./backend
      run: npm audit --audit-level moderate

    - name: Frontend Security Audit
      working-directory: ./frontend
      run: npm audit --audit-level moderate

    # Optional: Add Snyk or other security tools
    # - name: Run Snyk Security Test
    #   uses: snyk/actions/node@master
    #   env:
    #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Job 5: Docker Integration Test
  docker-test:
    name: Docker Integration
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Test Docker Compose
      run: |
        docker-compose up -d redis
        sleep 10
        
        # Test Redis connectivity
        docker-compose exec -T redis redis-cli ping
        
        # Check Redis is accessible
        docker-compose ps
        
        # Cleanup
        docker-compose down

  # Job 6: Educational Content Validation
  docs-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Check Documentation Files
      run: |
        # Check required documentation exists
        files=(
          "README.md"
          "ARCHITECTURE.md" 
          "DEVELOPMENT.md"
          "CONTRIBUTING.md"
          "backend/.env.example"
        )
        
        for file in "${files[@]}"; do
          if [[ ! -f "$file" ]]; then
            echo "❌ Missing required file: $file"
            exit 1
          else
            echo "✅ Found: $file"
          fi
        done

    - name: Validate Markdown Links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/markdown-link-check-config.json'
        folder-path: '.'
        file-extension: '.md'

    - name: Check Code Documentation
      run: |
        # Check for JSDoc comments in TypeScript files
        echo "Checking for educational comments in code..."
        
        # Backend documentation check
        backend_docs=$(grep -r "\/\*\*" backend/src/ || true)
        if [[ -z "$backend_docs" ]]; then
          echo "⚠️  Warning: Limited JSDoc documentation in backend"
        else
          echo "✅ Backend has JSDoc documentation"
        fi
        
        # Frontend documentation check  
        frontend_docs=$(grep -r "\/\*\*" frontend/src/ || true)
        if [[ -z "$frontend_docs" ]]; then
          echo "⚠️  Warning: Limited JSDoc documentation in frontend"
        else
          echo "✅ Frontend has JSDoc documentation"
        fi

  # Job 7: Educational Smoke Test
  educational-smoke-test:
    name: Educational Value Verification
    runs-on: ubuntu-latest
    needs: [build, integration-test]
    
    services:
      redis:
        image: redis:${{ env.REDIS_VERSION }}-alpine
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Dependencies
      working-directory: ./backend
      run: npm ci

    - name: Download Backend Build
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: backend/dist/

    - name: Test Educational Logging
      working-directory: ./backend
      run: |
        # Start the server in background
        timeout 30 node dist/server.js &
        SERVER_PID=$!
        
        sleep 5
        
        # Test that educational logs are working
        curl -s -X POST http://localhost:3000/api/login \
          -H "Content-Type: application/json" \
          -d '{"username":"juan","password":"123456"}' \
          -c cookies.txt
        
        # Test protected route
        curl -s -b cookies.txt http://localhost:3000/api/profile
        
        # Test logout
        curl -s -b cookies.txt -X POST http://localhost:3000/api/logout
        
        # Cleanup
        kill $SERVER_PID || true
        
        echo "✅ Educational smoke test completed"

# Optional: Add notification job for failures
  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [code-quality, build, integration-test, security, docker-test, docs-validation, educational-smoke-test]
    if: failure()
    
    steps:
    - name: Notify Failure
      run: |
        echo "❌ CI Pipeline failed. Check the logs for details."
        echo "This affects the educational demo stability."